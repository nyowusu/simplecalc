{"version":3,"sources":["components/display/DisplayMain.component.jsx","components/display/DisplayAuxilliary.component.jsx","components/functionbuttons/FunctionButton.component.jsx","components/operator/OperatorButton.component.jsx","components/numberbuttons/NumberButton.component.jsx","components/zerobutton/ZeroButton.component.jsx","App.js","serviceWorker.js","index.js"],"names":["DisplayMain","props","react_default","a","createElement","className","values","DisplayAuxilliary","FunctionButton","onClick","e","actionClick","content","OperatorButton","operator","NumberButton","appendNumber","number","ZeroButton","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClearDisplays","setState","maindisplay","auxilliary","prevNumber","handleSetSign","state","String","handlePercentage","handleClick","main","containsDot","includes","nextNumber","indexOf","substring","handleAddition","manageDisplays","setOperator","prev","curr","handleSubtraction","handleMultiplication","handleDivision","handlePerformOperation","newNumber","Number","DIVIDE","ADD","SUBTRACT","MULTIPLY","ZERO","length","lastIndexOf","manageAuxDisplay","manageMainDisplay","callback","concat","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2368a94a.chunk.js","sourcesContent":["import React from 'react';\nimport './../assets/Display.styles.css'\n\nexport function DisplayMain(props) {\n    return (\n        <div className=\"display display-main\">\n            {props.values}\n        </div>\n    );\n}\n\n","import React from 'react';\nexport function DisplayAuxilliary(props) {\n    return (<div className=\"display display-aux\">\n        {props.values}\n    </div>);\n}\n","import React from 'react';\nimport './../assets/button.styles.css';\n\nexport function FunctionButton(props){\n    return (\n        <div className=\"btn\" onClick={(e) => {props.actionClick()}} >\n            {props.content}\n        </div>\n    );\n}","import React from 'react';\nimport './../assets/button.styles.css'\n\nexport function OperatorButton(props) {\n    return (\n            <div className=\"btn operator\" onClick={(e) => (props.actionClick(props,e))}>\n            {props.operator}\n        </div>\n    );    \n}","import React from 'react';\nimport './../assets/button.styles.css';\n \nexport function NumberButton(props) {\n    return (\n        <div className=\"btn\" onClick={(e) => props.appendNumber(props, e)}>\n            {props.number}\n        </div>\n    );\n}","import React from 'react';\nimport './../assets/button.styles.css';\n\nexport function ZeroButton(props) {\n    return (\n        <div className=\"btn col-2\" onClick={(e)=>{props.appendNumber(props, e)}}>\n            {props.number}\n        </div>\n    );\n}","import React, {Component} from 'react';\nimport {DisplayMain} from './components/display/DisplayMain.component';\nimport { DisplayAuxilliary } from \"./components/display/DisplayAuxilliary.component\";\nimport {FunctionButton} from './components/functionbuttons/FunctionButton.component';\nimport { OperatorButton } from './components/operator/OperatorButton.component';\nimport { NumberButton } from './components/numberbuttons/NumberButton.component';\nimport { ZeroButton } from './components/zerobutton/ZeroButton.component';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      maindisplay: \"0\",\n      auxilliary: \"0\",\n      prevNumber: 0,\n      operator: null\n    }\n\n    this.DIVIDE = \"divide\";\n    this.ADD = \"add\";\n    this.SUBTRACT = \"subtract\";\n    this.MULTIPLY = \"multiply\";\n    this.ZERO = \"0\";\n  }\n\n  handleClearDisplays = () => {\n    this.setState({maindisplay: \"0\", auxilliary: \"0\", prevNumber: 0, operator: null});\n  }\n\n  handleSetSign = () => {\n      this.setState((state) => ({maindisplay: String(state.maindisplay * -1)}));\n  }\n\n  handlePercentage = () => {\n      this.setState((state) => ({maindisplay: String(state.maindisplay / 100)}))\n  }\n\n  handleClick = (props,e) => {\n    this.setState((state) => {\n      let dot = \".\";\n      let zero = \"0\";\n      let main = String(state.maindisplay);\n      let containsDot = main.includes(dot);\n      let nextNumber = String(props.number);\n      \n      // check if there's already a decimal point in the current number\n      if (!(containsDot) && (nextNumber === dot)) {\n        main = main + nextNumber;\n      }else if ((containsDot) && (nextNumber !== dot)){\n        main = main + nextNumber;\n      } else if (!(containsDot) && (nextNumber !== dot)) {\n        main = main + nextNumber;\n      }\n      //check if the first number is zero\n      //to avoid repition of zeros with a decimal point\n      if ((main.indexOf(zero) === 0) && (main.indexOf(dot) === -1)) {\n        main = main.substring(1);\n      }\n      \n      return {maindisplay: main}\n    });\n  }\n\n  manageDisplays(props) {\n    //const operators = [\"รท\",\"x\",\"-\",\"+\"];\n    \n    if ((this.state.auxilliary.length > 1) &&\n            this.state.auxilliary.lastIndexOf(\"0\") !== 0) {\n      \n      // set the current number to operated on\n      this.manageAuxDisplay(props);\n\n    } else if((this.state.auxilliary.length === 1) && \n      (((this.state.maindisplay.length === 1) && (this.state.maindisplay.indexOf(\"0\") !== 0)) || \n      (this.state.maindisplay.length > 1))) {\n\n      // set the current number to be operated on.\n      this.manageMainDisplay();\n      this.manageAuxDisplay(props);\n    }\n  } \n\n  handleAddition = (props, e) => {\n    // show current number in auxilliary display\n    // with the addition sign \n    // then clear main display. \n    this.manageDisplays(props);\n    this.setOperator((prev, curr) => (prev + curr));\n  }\n\n  handleSubtraction = (props, e) => {\n    // show current number in auxilliary display\n    // with the subtraction sign \n    // then clear main display.\n    this.manageDisplays(props);\n    this.setOperator((prev, curr) => (prev - curr));\n  }\n\n  handleMultiplication = (props, e) => {\n    // show current number in auxilliary display\n    // with the multiplication sign \n    // then clear main display.\n    this.manageDisplays(props);\n    this.setOperator((prev, curr) => (prev * curr));\n  }\n\n  handleDivision = (props, e) => {\n    // show current number in auxilliary display\n    // with the division sign \n    // then clear main display.\n    this.manageDisplays(props);\n    this.setOperator((prev, curr) => {\n      if (curr === 0) {\n        return 0;\n      }\n\n      return (prev / curr);\n    });\n  }\n\n  handlePerformOperation = () => {\n    let newNumber = Number(this.state.maindisplay);\n\n    if (this.state.operator !== null) {\n      newNumber = this.state.operator(this.state.prevNumber, newNumber);\n    }\n\n    this.setState(() => {\n      return {maindisplay: String(newNumber), auxilliary:\"0\"}\n    });\n    \n  }\n\n  setOperator(callback) {\n    this.setState({ operator: callback });\n  }\n\n  manageMainDisplay() {\n    this.setState((state) => {\n      return {\n      maindisplay: \"0\",\n        prevNumber: Number(state.maindisplay)\n      };\n    });\n  }\n\n  manageAuxDisplay(props) {\n    this.setState((state) => {\n      return {\n        auxilliary: `${state.prevNumber} ${props.operator}`\n      };\n    });\n  }\n\n  componentDidUpdate() {\n\n  }\n\n  render() { \n    \n    return (\n    <div className=\"calculator\">\n      <DisplayAuxilliary key=\"aux\" values={this.state.auxilliary} />\n      <DisplayMain key=\"main\" values={this.state.maindisplay}  />\n      <FunctionButton content=\"AC\" actionClick={this.handleClearDisplays} />\n      <FunctionButton content=\"+/-\" actionClick={this.handleSetSign}  />\n      <FunctionButton content=\"%\" actionClick={this.handlePercentage} />\n      <OperatorButton operator=\"รท\" actionClick={this.handleDivision} />\n      <NumberButton number=\"7\" appendNumber={this.handleClick} />\n      <NumberButton number=\"8\" appendNumber={this.handleClick} />\n      <NumberButton number=\"9\" appendNumber={this.handleClick} />\n      <OperatorButton operator=\"x\" actionClick={this.handleMultiplication} />\n      <NumberButton number=\"4\" appendNumber={this.handleClick} />\n      <NumberButton number=\"5\" appendNumber={this.handleClick} />\n      <NumberButton number=\"6\" appendNumber={this.handleClick} />\n      <OperatorButton operator=\"-\" actionClick={this.handleSubtraction} />\n      <NumberButton number=\"1\" appendNumber={this.handleClick} />\n      <NumberButton number=\"2\" appendNumber={this.handleClick} />\n      <NumberButton number=\"3\" appendNumber={this.handleClick} />\n      <OperatorButton operator=\"+\" actionClick={this.handleAddition} />\n      <ZeroButton number=\"0\" appendNumber={this.handleClick} />\n      <NumberButton number=\".\" appendNumber={this.handleClick} />\n      <OperatorButton operator=\"=\" actionClick={this.handlePerformOperation} />\n    </div>\n  )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}